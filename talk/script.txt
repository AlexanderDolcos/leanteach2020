#+TITLE: Script for presentation of LeanTeach 2020

* Opening remarks (Vaibhav)
- I am pleased to introduce our project of formalizing Geometry in
  Lean.

- This project was interesting because it uses a completely new
  programming language called Lean -- we will have more details in the
  video.

- This reseach was a combination of Mathematics and CS.


* ------# Video Starts -----------------


* Introduce goals (Alex)
- Introduce Interactive Theorem Proving, Curry-Howard Isomorphism, and
  Lean

- Learn lean

- Formalize euclid, hilbert, tarski



* Explain Euclid (Nicholas)
- Historically, this was the first successful attempt at creating a
  foundation of geometry.

- Euclid based his definition of geometry on physical constructions
  with just a compass and straightedge, allowing him to define points,
  lines, rays, and circles.

- Euclid also defined a set of fundamental relations, like
  betweenness, congruence, and interesection.

- He did not define any coordinate system or units of distance like we
  use in analytical geometry, he only defined ways to compare line
  segments as less than, equal to, or greater than each other.

- Euclid also defined a set of axioms for 3 dimensional geometry, but
  we focused on 2 dimensional geometry for this project.



* Explore challenges of formalizing Euclid in Lean (Nicholas)
- When formalizing euclidian geometry in lean we ran into several
  challenges.

- First, Euclid relied on physical drawings to define relations.

- He assumes that two circles intersect when they their centers lie on
  each other's radii, as the diagram shows, but Euclid never defined an
  axiom stating this to be true or gave any justification for it.

- We had to introduce axioms for intersections between circles and
  other primative objects to account for this.

- Euclid also does not rigorusly define distance, instead relying on
  out understanding of distance as it works in the real world.

- We had to introduce axioms stating that distance is a non negative
  real number to formalize euclid's understanding.

- Once we formalized all of euclid's assumptions, we ran into problems
  with lean.

- Euclid's proofs are based on construction with a compass
  and straightedge.

- When translating his proofs into the linear grammar of lean they
  became very verbose.

- Euclids's more complicated postulates take more thank 150 lines of
  code per proposition to formalize!

- As we wrote longer proofs, lean became slower to the point that it
  would take 10 seconds to see the results of our changes.

- Eventually, lean became unusable slow for long proofs and we had to
  transition to from using cloud platforms to using local Lean
  installations on Github.


* Explain hilbert (Lawrence)
- Parallel to formalizing Euclid's work in Lean, we were
  simultaneously working on Hilbert's axioms as well.

- Given the old age of Euclid's formalization of geometry, at the
  beginning of the 20th century Hilbert established a set of 20
  assumptions as a foundation for a more modern examination of Euclidean
  geometry.

- Just like in the case of Euclid, we only focused on 2D geometry in
  Hilbert's case.

- With some slight modifications, we were able to formalize all but
  one of the axioms relating to planar geometry into Lean.

- Hilbert's axioms create a synthetic geometry system, so he tends to
  avoid certain definitions (such as distance). We had to introduce
  these notions in ways that were compatible with his system.


* Explain hilbert in lean (Lawrence)
- In order to prove more complicated facts in Lean, we needed to
  create various structures and relations in the context of Hilbert's
  primitive ideas.

- For example, we needed to define triangles and a definition of
  supplementary angles.

- Proofs in Lean involved using a combination of proof tactics built
  into the language and the axioms we formalized.  We can think of
  these as commands like "simplify" or "rewrite using hypothesis" that
  we can give to lean and lean then reports back the results of these
  operations to us.

- As in Euclidean geometry, we found that proofs in Lean for Hilbert's
  geometry were quite verbose. Proofs that may appear to be easy to
  prove on paper sometimes were challenging to prove to a computer.

- To illustrate, here is a proof of the fact that if two distinct
  lines intersect, they do so at exactly one point.


* Challenges (Edward)
- In trying to formalize these axioms and propositions in Lean, we ran
  into several challenges.

- Online platforms that offered collaborative editing of Lean code
  were difficult to handle: we tried using CoCalc, VsCode Liveshare
  and simple Zoom screensharing.

- While Cocalc became extremely slow when multiple people worked on it
  at once, Liveshare required frequent restarts because of bugs in
  lean.  These tools let everyone see the code but did not give us
  fast and responsive feedback needed for code development.

- We managed to solve this issue only by moving to Github and sharing
  our code with each other via Git commits.

- On the mathematical side of things, there were several missing
  axioms and propositions. We had to figure out exactly what was
  missing and what needed to be added so we could complete proofs of
  propositions in both the Euclid and Hilbert system.

- It especially became difficult trying to teach Lean the concept of
  "length" or "distance".

- Lastly, while writing proofs in Lean was easy, making new
  definitions for those proofs was arduous.


* Future directions (Edward)
- future work would involve streamlining the definitions of Euclid's
  and Hilbert's axioms.

- And we mentioned, Euclid proved 48 different propositions using his
  axioms. We have many more propositions that we need to be proven.

- The final goal in all of this is to utilize these propositions to
  prove the pythagorean theorem in Lean (this is Proposition #48 of
  Euclid).

- Later, we can also add other geometry axioms systems like those of
  Tarski and Birkhoff.  It will be great if we are able to build a
  single unified API for all these systems -- Euclid, Hilbert, Tarski,
  and Birkhoff.

- After formalizing plane geometry, we could also explore more
  advanced geometries like hyperbolic and spherical geometry.

- In the end, Lean is one of many proof-checkers.  It could prove
  useful to explore other systems like Coq and HOL-Light.


* ------# Video Ends -----------------

* Vaibhav : Q&A moderation


